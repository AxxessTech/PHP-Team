(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{365:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"version-control"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#version-control"}},[e._v("#")]),e._v(" Version Control")]),e._v(" "),a("p",[e._v("All of our projects use Git with a repository hosted on Stash.\nSince we're a small team, and most projects have less than three people working on it simultaneously,\nwe have pretty loose Git guidelines since we rarely bump into conflicts.")]),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"repo-naming-conventions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#repo-naming-conventions"}},[e._v("#")]),e._v(" Repo naming conventions")]),e._v(" "),a("p",[e._v("The repos name should be kebab-cased.")]),e._v(" "),a("ul",[a("li",[e._v("Bad: "),a("code",[e._v("AdminPortal")]),e._v(", "),a("code",[e._v("Chaps")])]),e._v(" "),a("li",[e._v("Good: "),a("code",[e._v("admin-portal")]),e._v(", "),a("code",[e._v("cahps")])])]),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),a("p",[e._v("Once a project has gone live, the master branch must always be stable.\nIt should be safe to deploy the master branch to production at all times.\nAll branches are assumed to be active; stale branches should get cleaned up accordingly.")]),e._v(" "),a("h3",{attrs:{id:"feature-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#feature-branches"}},[e._v("#")]),e._v(" FEATURE BRANCHES")]),e._v(" "),a("p",[e._v("All commits to "),a("code",[e._v("master")]),e._v(" must be added through a feature branch. In most cases, it's preferred to squash your commits on merge.")]),e._v(" "),a("p",[e._v('Feature branches should ideally be prefixed with a branch type, ie; "bugfix/", "feature/" or an appropriate custom prefix.\nWhen creating a branch from a Jira ticket, a GUI will provide a choice.')]),e._v(" "),a("p",[e._v("There's no strict ruling on feature branch names, just make sure it's clear enough to know what they're for.\nBranches may only contain lowercase letters, hyphens and forward slashes.")]),e._v(" "),a("ul",[a("li",[e._v("Bad: "),a("code",[e._v("Add-NewEmails")]),e._v(", "),a("code",[e._v("random-things")]),e._v(", "),a("code",[e._v("develop")])]),e._v(" "),a("li",[e._v("Good: "),a("code",[e._v("feature/daily-report-email")]),e._v(", "),a("code",[e._v("bugfix/missing-agencies")]),e._v(" or "),a("code",[e._v("upgrade-frontend")])])]),e._v(" "),a("h3",{attrs:{id:"pull-requests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pull-requests"}},[e._v("#")]),e._v(" PULL REQUESTS")]),e._v(" "),a("p",[e._v("Merging branches via pull requests isn't a requirement, but can be useful if:")]),e._v(" "),a("ul",[a("li",[e._v("You want a peer to review your changes")]),e._v(" "),a("li",[e._v("You want to ensure your branch can be merged and commits can be squashed via an interface")]),e._v(" "),a("li",[e._v("Future you wants a quick way to retrieve that point in history by browsing passed pull requests")])]),e._v(" "),a("h3",{attrs:{id:"merging-and-rebasing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#merging-and-rebasing"}},[e._v("#")]),e._v(" MERGING AND REBASING")]),e._v(" "),a("p",[e._v("Ideally, rebase your branch regularly to reduce the chance of merge conflicts.")]),e._v(" "),a("ul",[a("li",[e._v("If you want to deploy a feature branch to master, use "),a("code",[e._v("git merge <branch> --squash")])]),e._v(" "),a("li",[e._v("If your push is denied, rebase your branch first using "),a("code",[e._v("git rebase")])])]),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"commits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commits"}},[e._v("#")]),e._v(" Commits")]),e._v(" "),a("p",[e._v("There's not strict ruling on commits in projects in initial development, however, descriptive commit messages are recommended.\nAfter a project has gone live, descriptive commit messages are required. Always use present tense in commit messages.")]),e._v(" "),a("ul",[a("li",[e._v("Non-descriptive: "),a("code",[e._v("wip")]),e._v(", "),a("code",[e._v("commit")]),e._v(", "),a("code",[e._v("a lot")]),e._v(", "),a("code",[e._v("solid")])]),e._v(" "),a("li",[e._v("Descriptive: "),a("code",[e._v("Update dependencies")]),e._v(", "),a("code",[e._v("Fix missed mail calculation in monthly report")])])]),e._v(" "),a("p",[e._v("Ideally, prefer granular commits.")]),e._v(" "),a("ul",[a("li",[e._v("Acceptable: "),a("code",[e._v("Cart fixes")])]),e._v(" "),a("li",[e._v("Better: "),a("code",[e._v("Fix add to cart button")]),e._v(", "),a("code",[e._v("Fix cart count on home")])])]),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"git-tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-tips"}},[e._v("#")]),e._v(" Git Tips")]),e._v(" "),a("h3",{attrs:{id:"creating-granular-commits-with-patch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-granular-commits-with-patch"}},[e._v("#")]),e._v(" CREATING GRANULAR COMMITS WITH PATCH")]),e._v(" "),a("p",[e._v("If you've made multiple changes but want to split them into more granular commits, use "),a("code",[e._v("git add -p")]),e._v(".\nThis will open an interactive session in which you can choose which chunks you want to stage for your commit.")]),e._v(" "),a("h3",{attrs:{id:"moving-commits-to-a-new-branch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#moving-commits-to-a-new-branch"}},[e._v("#")]),e._v(" MOVING COMMITS TO A NEW BRANCH")]),e._v(" "),a("p",[e._v("First, create your new branch, then revert the current branch, and finally checkout the new branch.")]),e._v(" "),a("p",[e._v("Don't do this to commits that have already been pushed without double checking with your collaborators!")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" branch my-branch\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset --hard HEAD~3 "),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# OR git reset --hard <commit>")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout my-branch\n")])])]),a("h3",{attrs:{id:"squashing-commits-already-pushed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#squashing-commits-already-pushed"}},[e._v("#")]),e._v(" SQUASHING COMMITS ALREADY PUSHED")]),e._v(" "),a("p",[e._v("Only execute when you are sure that no-one else pushed changes during your commits.")]),e._v(" "),a("p",[e._v("First, copy the SHA from the commit previous to your commits that need to be squashed.")]),e._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" reset --soft "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"your new message"')]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" push --force\n")])])]),a("h3",{attrs:{id:"cleaning-up-local-branches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cleaning-up-local-branches"}},[e._v("#")]),e._v(" CLEANING UP LOCAL BRANCHES")]),e._v(" "),a("p",[e._v("After a while, you'll end up with a few stale branches in your local repository.\nBranches that don't exist upstream can be cleaned up with "),a("code",[e._v("git remote prune origin")]),e._v(".\nIf you want to ensure you're not about to delete something important, add a "),a("code",[e._v("--dry-run")]),e._v(" flag.")]),e._v(" "),a("br"),e._v(" "),a("h2",{attrs:{id:"resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),a("ul",[a("li",[e._v("Most of this is based on the "),a("a",{attrs:{href:"https://guides.github.com/introduction/flow/",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub Flow"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Merge vs. rebase on "),a("a",{attrs:{href:"https://www.atlassian.com/git/tutorials/merging-vs-rebasing",target:"_blank",rel:"noopener noreferrer"}},[e._v("Atlassian"),a("OutboundLink")],1)]),e._v(" "),a("li",[e._v("Merge vs. rebase by "),a("a",{attrs:{href:"https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa",target:"_blank",rel:"noopener noreferrer"}},[e._v("@porteneuve"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);